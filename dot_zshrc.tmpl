ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Download zinit if we dont have it
if [ ! -d $ZINIT_HOME ]; then
	mkdir -p "$(dirname $ZINIT_HOME)"
	git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
fi

source "${ZINIT_HOME}/zinit.zsh"

# Load starship theme
# line 1: `starship` binary as command, from github release
# line 2: starship setup at clone(create init.zsh, completion)
# line 3: pull behavior same as clone, source init.zsh
zinit ice as"command" from"gh-r" \
          atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
          atpull"%atclone" src"init.zsh"
zinit light starship/starship

# Zsh plugins
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-completions

zinit wait lucid atload'_zsh_autosuggest_start' light-mode for \
    zsh-users/zsh-autosuggestions

# Snippets
zinit snippet OMZP::git
zinit snippet OMZP::gcloud
zinit snippet OMZP::command-not-found
zinit snippet OMZP::tmux
zinit snippet OMZP::ssh
zinit snippet OMZP::docker-compose
zinit snippet OMZL::key-bindings.zsh
zinit snippet OMZL::functions.zsh
zinit snippet OMZL::termsupport.zsh

zinit load atuinsh/atuin

zinit wait lucid for \
  atinit"zicompinit; zicdreplay"  \
      OMZP::colored-man-pages \
  as"completion" \
        OMZP::docker/completions/_docker

{{- if eq .chezmoi.os "darwin" }}
FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

export PATH="$PATH:/Users/madsenm1/.local/bin"
{{- end }}

# Load completions
autoload -U compinit && compinit
autoload -U +X bashcompinit && bashcompinit

zinit cdreplay -q

# Keybindings
bindkey -e
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward


# History
HISTSIZE=5000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_find_no_dups

# For kill-word, see https://github.com/ohmyzsh/ohmyzsh/issues/9367
WORDCHARS=''

# Completion styling
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors '${(s.:.)LS_COLORS}'

# Aliases
alias ls='eza -a --icons=auto'
alias ll='eza -l --icons=auto --no-user --group-directories-first  --time-style long-iso'
alias vim='nvim'
alias cat='bat'

# Env variables
export EDITOR='nvim'

{{- if eq .work_laptop true }}
export SSL_CERT_FILE=/opt/homebrew/etc/openssl@3/cert.pem   # Various tools incl Golang
export ca_certificates_file=${SSL_CERT_FILE}                # Various tools incl Python & gsutil/boto
export CLOUDSDK_CORE_CUSTOM_CA_CERTS_FILE=${SSL_CERT_FILE}  # gcloud
export CURL_CA_BUNDLE=${SSL_CERT_FILE}                      # curl
export REQUESTS_CA_BUNDLE=${SSL_CERT_FILE}                  # Python requests library
export HTTPLIB2_CA_CERTS=${SSL_CERT_FILE}                   # Python httplib2 library
export GRPC_DEFAULT_SSL_ROOTS_FILE_PATH=${SSL_CERT_FILE}    # GRPC
{{ else }}
export ANTHROPIC_API_KEY={{ onepasswordRead "op://private/anthropic api key/credential" }}
{{ end }}

# https://yazi-rs.github.io/docs/quick-start#shell-wrapper
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	IFS= read -r -d '' cwd < "$tmp"
	[ -n "$cwd" ] && [ "$cwd" != "$PWD" ] && builtin cd -- "$cwd"
	rm -f -- "$tmp"
}

# Set tmux terminal title
# Source: https://wiki.archlinux.org/title/Zsh
# autoload -Uz add-zsh-hook
# function xterm_title_precmd () {
# 	print -Pn -- '\e]2;\a'
# }
# function xterm_title_preexec () {
# 	print -Pn -- '\e]2;%# ' && print -n -- "${(q)1}\a"
# }
# if [[ "$TERM" == (Eterm*|alacritty*|aterm*|foot*|gnome*|konsole*|kterm*|putty*|rxvt*|screen*|wezterm*|tmux*|xterm*) ]]; then
# 	add-zsh-hook -Uz precmd xterm_title_precmd
# 	add-zsh-hook -Uz preexec xterm_title_preexec
# fi

# Shell integrations
eval "$(zoxide init zsh --cmd cd)"
eval "$(fzf --zsh)"
eval "$(atuin init zsh)"

{{- if eq .chezmoi.os "linux" }}
# https://nix.dev/manual/nix/2.30/nix-2.30.html
source  /etc/profile.d/nix-daemon.sh
{{ end }}
